import { create } from "zustand";

const useOrderStore = create((set) => ({
  rating: 0,
  setRating: (value) => set(() => ({ rating: value })),
  categories: [],
  setCategories: (value) => set(() => ({ categories: value })),
  isLoading: false,
  setToLoad: () => set(() => ({ isLoading: true })),
  setToNotLoad: () => set(() => ({ isLoading: false })),
  slugSelected: "",
  setSlugSelected: (e) => set(() => ({ slugSelected: e.target.value })),
  idCategorySelected: "",
  setIdCategorySelected: (id) => set(() => ({ idCategorySelected: id })),
  categorySelected: {},
  setCategorySelected: (value) => set(() => ({ categorySelected: value })),
  categoryDescription: "",
  setCategoryDescription: (e) =>
    set(() => ({ categoryDescription: e.target.value })),
  categoryName: "",
  setCategoryName: (value) => set(() => ({ categoryName: value })),
  isSubmitting: false,
  submitInit: () => set(() => ({ isSubmitting: true })),
  submitCancel: () => set(() => ({ isSubmitting: false })),
  isOrderSended: false,
  orderSendedSuccess: () => set(() => ({ isOrderSended: true })),
  orderSendedCancel: () => set(() => ({ isOrderSended: false })),
  isError: false,
  errorInit: () => set(() => ({ isError: true })),
  errorCancel: () => set(() => ({ isError: false })),
  resetOrderStore: () =>
    set(() => ({
      categories: [],
      slugSelected: "",
      categorySelected: {},
      categoryDescription: "",
      categoryName: "",
      isSubmitting: false,
      isError: false,
    })),
  isSMSTokenOpen: false,
  openSMSToken: () => set(() => ({ isSMSTokenOpen: true })),
  closeSMSToken: () => set(() => ({ isSMSTokenOpen: false })),
  cel: "",
  setCel: (value) => set(() => ({ cel: value })),
  filter: {
    category: "",
    categoryId: "",
    requestAnswers: [],
    requesterLocation: "",
    requesterName: "",
    requesterEmail: "",
    requesterContact: "",
  },
  setFilter: (filterData) => set(() => ({ filter: filterData })),
  isSMSTokenOpen: false,
  SMSTokenOpened: () => set(() => ({ isSMSTokenOpen: true })),
  SMSTokenNotOpened: () => set(() => ({ isSMSTokenOpen: false })),
  sendAgainTimer: 0,
  setSendAgainTimer: (value) => set(() => ({ sendAgainTimer: value })),
  sendAgain: false,
  toSendAgain: () => set(() => ({ sendAgain: true })),
  toDontSendAgain: () => set(() => ({ sendAgain: false })),
}));

export default useOrderStore;
